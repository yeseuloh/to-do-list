{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","finishedList","setFinishedList","unfinishedList","setUnfinishedList","todoInput","setTodoInput","updateList","e","preventDefault","unfinishedListCopy","push","className","length","map","todo","index","onClick","finishedListCopy","splice","markAsUnfinished","class","markAsFinished","style","display","flexDirection","width","type","onChange","target","value","autoFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAyGeA,MArGf,WAAgB,IAAD,EAC2BC,IAAMC,SAAS,IAD1C,mBACNC,EADM,KACQC,EADR,OAE+BH,IAAMC,SAAS,IAF9C,mBAENG,EAFM,KAEUC,EAFV,OAGqBL,IAAMC,SAAS,IAHpC,mBAGNK,EAHM,KAGKC,EAHL,KASPC,EAAa,SAAAC,GACjBA,EAAEC,iBACF,IAAIC,EAAkB,YAAOP,GAC7BO,EAAmBC,KAAKN,GACxBD,EAAkBM,GAClBJ,EAAa,KAuBf,OACE,sBAAKM,UAAU,eAAf,UACE,4CACCX,EAAaY,OAAS,GACrB,qBAAKD,UAAU,sBAAf,SACGX,EAAaa,KAAI,SAACC,EAAMC,GAAP,OAChB,mCACGD,GACC,sBAAKH,UAAU,mBAAf,UACE,qBACEA,UAAU,sCACVK,QAAS,SAAAT,GAAC,OA/BH,SAACA,EAAGQ,GAC3BR,EAAEC,iBACF,IAAIC,EAAkB,YAAOP,GAC7BO,EAAmBC,KAAKV,EAAae,IACrCZ,EAAkBM,GAClB,IAAIQ,EAAgB,YAAOjB,GAC3BiB,EAAiBC,OAAOH,EAAO,GAC/Bd,EAAgBgB,GAwBcE,CAAiBZ,EAAGQ,IAFpC,SAIE,uBAAMK,MAAM,YAAZ,UACE,qBAAKA,MAAM,mBACX,qBAAKA,MAAM,wBAGf,4BAAgBN,GAARC,aAUnBb,EAAeU,OAAS,GACvB,qBAAKD,UAAU,sBAAf,SACGT,EAAeW,KAAI,SAACC,EAAMC,GAAP,OAClB,mCACGD,GACC,sBAAKH,UAAU,mBAAf,UACE,qBACEA,UAAU,wCACVK,QAAS,SAAAT,GAAC,OA9CL,SAACA,EAAGQ,GACzBR,EAAEC,iBACF,IAAIS,EAAgB,YAAOjB,GAC3BiB,EAAiBP,KAAKR,EAAea,IACrCd,EAAgBgB,GAChB,IAAIR,EAAkB,YAAOP,GAC7BO,EAAmBS,OAAOH,EAAO,GACjCZ,EAAkBM,GAuCYY,CAAed,EAAGQ,MAElC,4BAAgBD,GAARC,aAUpB,uBAAMJ,UAAU,qBAAhB,UACE,qBACEA,UAAU,wCACVK,QAASV,IAEX,sBAAKgB,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,MAAO,QAA9D,UACE,uBAAOC,KAAK,OAAOC,SAtFG,SAAApB,GAC5BF,EAAaE,EAAEqB,OAAOC,QAqFoCA,MAAOzB,EAAW0B,WAAS,IAC/E,wBAAQnB,UAAU,gBAAgBK,QAASV,EAA3C,kDCpFKyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a07d1788.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [finishedList, setFinishedList] = React.useState([]);\n  const [unfinishedList, setUnfinishedList] = React.useState([]);\n  const [todoInput, setTodoInput] = React.useState(\"\");\n\n  const handleTodoInputChange = e => {\n    setTodoInput(e.target.value);\n  };\n\n  const updateList = e => {\n    e.preventDefault();\n    var unfinishedListCopy = [...unfinishedList];\n    unfinishedListCopy.push(todoInput);\n    setUnfinishedList(unfinishedListCopy);\n    setTodoInput(\"\");\n  };\n\n  const markAsUnfinished = (e, index) => {\n    e.preventDefault();\n    var unfinishedListCopy = [...unfinishedList];\n    unfinishedListCopy.push(finishedList[index]);\n    setUnfinishedList(unfinishedListCopy);\n    var finishedListCopy = [...finishedList];\n    finishedListCopy.splice(index, 1);\n    setFinishedList(finishedListCopy);\n  };\n\n  const markAsFinished = (e, index) => {\n    e.preventDefault();\n    var finishedListCopy = [...finishedList];\n    finishedListCopy.push(unfinishedList[index]);\n    setFinishedList(finishedListCopy);\n    var unfinishedListCopy = [...unfinishedList];\n    unfinishedListCopy.splice(index, 1);\n    setUnfinishedList(unfinishedListCopy);\n  };\n\n  return (\n    <div className=\"todo-wrapper\">\n      <h1>To Do List</h1>\n      {finishedList.length > 0 && (\n        <div className=\"todo-output-wrapper\">\n          {finishedList.map((todo, index) => (\n            <>\n              {todo && (\n                <div className=\"todo-output-item\">\n                  <div\n                    className=\"check-button check-button--finished\"\n                    onClick={e => markAsUnfinished(e, index)}\n                  >\n                    <span class=\"checkmark\">\n                      <div class=\"checkmark_stem\"></div>\n                      <div class=\"checkmark_kick\"></div>\n                    </span>\n                  </div>\n                  <p key={index}>{todo}</p>\n                  {/* <button className=\"button-delete\" onClick={ e => markAsUnfinished(e, index)}>\n                    Undone\n                  </button> */}\n                </div>\n              )}\n            </>\n          ))}\n        </div>\n      )}\n      {unfinishedList.length > 0 && (\n        <div className=\"todo-output-wrapper\">\n          {unfinishedList.map((todo, index) => (\n            <>\n              {todo && (\n                <div className=\"todo-output-item\">\n                  <div\n                    className=\"check-button check-button--unfinished\"\n                    onClick={e => markAsFinished(e, index)}\n                  ></div>\n                  <p key={index}>{todo}</p>\n                  {/* <button className=\"button-delete\" onClick={e => markAsFinished(e, index)}>\n                    Done\n                  </button> */}\n                </div>\n              )}\n            </>\n          ))}\n        </div>\n      )}\n      <form className=\"todo-input-wrapper\">\n        <div\n          className=\"check-button check-button--unfinished\"\n          onClick={updateList}\n        ></div>\n        <div style={{display: 'flex', flexDirection: 'column', width: '100%'}}>\n          <input type=\"text\" onChange={handleTodoInputChange} value={todoInput} autoFocus/>\n          <button className=\"button-update\" onClick={updateList}>\n            â†’ Return/Enter to add\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}